{"name":"Simple.Config","tagline":"C# Lightweight Configuration Manager","body":"![Simple.Config](https://raw.github.com/spolnik/Simple.Config/master/dist/logo2-big.png)\r\n\r\n# Welcome to Simple.Config home page.\r\nSimple, fast and powerful configuration manager for .net. \r\n\r\nBuild your configurations from:\r\n* Config Files\r\n* Namespaces\r\n* Properties\r\n\r\nLoad your configuration files from:\r\n* http (xml)\r\n* shared drives (xml, ini)\r\n* local disks (xml, ini)\r\n\r\n[[Simple.Config 1.0](https://github.com/spolnik/Simple.Config/blob/master/dist/Simple.Config_1.0_Release.zip?raw=true)]\r\n\r\n# Sample Usage\r\n\r\n### Preload file\r\nPreload (preload.xml) file is allowing us on primary load of configuration files during application start. There are two locations where preload.xml file will be searched:\r\n* preload.xml in application folder (default)\r\n* using appSettings with key _Simple.Config.ConfigurationManager.Preload_ allows us on setting custom path to preload.xml file, like in below app.config:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<configuration>\r\n  <appSettings>\r\n    <add  key=\"Simple.Config.ConfigurationManager.Preload\" value=\"preload.xml\"/>\r\n  </appSettings>\r\n</configuration>\r\n```\r\n\r\nBelow you can find preload.xml file used in sample:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ConfigManager>\r\n\t<namespace name=\"Simple.Config.ConfigurationManager\">\r\n\t\t<property name=\"preload\">\r\n\t\t\t<value>first.xml</value>\r\n\t\t</property>\r\n    </namespace>\r\n</ConfigManager>\r\n```\r\n\r\n### Configuration files\r\nIn sample we are using two configuration files, first.xml and second.ini. As you could see, Simple.Config is supporting two file types:\r\n* xml files\r\n* ini files\r\n\r\nBelow you can see first.xml:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<!DOCTYPE ConfigManager SYSTEM \"ConfigManager.dtd\">\r\n\r\n<ConfigManager>\r\n  <namespace name=\"Simple.Config.Sample\">\r\n    <property name=\"Prop1\">\r\n      <value>That's the value of Prop1</value>\r\n    </property>\r\n\r\n    <property name=\"Prop2\">\r\n      <value>That's the value of Prop2</value>\r\n    </property>\r\n  </namespace>\r\n</ConfigManager>\r\n```\r\n\r\nXml configuration files are following simple approach, you are starting the settings with _ConfigManager_ tag, then you are creating namespaces, their properties and their values. Every property should have one or more values. Below you can see DTD schema file (ConfigManager.dtd) which is defining the template (it allows on intellisense support):\r\n```dtd\r\n<!ELEMENT ConfigManager (namespace+)>\r\n<!ELEMENT namespace (property+)>\r\n<!ELEMENT property (value+)>\r\n<!ELEMENT value (#PCDATA)>\r\n<!ATTLIST namespace\r\n\tname NMTOKEN #REQUIRED\r\n>\r\n<!ATTLIST property\r\n\tname NMTOKEN #REQUIRED\r\n>\r\n```\r\n\r\nAnd the second configuration file, second.ini:\r\n```ini\r\n[First Section]\r\nPropA=val1\r\nPropB=val2;val3\r\n```\r\n\r\nThe INI configuration file is a text file, containing the section lines ([section name]) and the set of properties. Every property is build from property name and the set of values (property_name=property_value1[;property_value2;...]).\r\n\r\n### Application code\r\n\r\n```csharp\r\nConsole.WriteLine(\"Simple.Config Sample - Start\");\r\nConsole.WriteLine();\r\n\r\nvar configManager = ConfigManager.GetInstance();\r\n\r\nvar sampleNamespace = configManager.GetNamespace(\"NConfig.Sample\");\r\n\r\nConsole.WriteLine(\"Namespace [xml]: \" + sampleNamespace.Name);\r\n\r\nforeach (var property in sampleNamespace.Properties)\r\n    Console.WriteLine(\"Property: [{0} = {1}]\", property.Name, property.Value);\r\n\r\nConsole.WriteLine();\r\n\r\nvar iniConfigFile = configManager.Load(\"second.ini\");\r\nvar iniNamespace = iniConfigFile.Namespaces.First();\r\n\r\nConsole.WriteLine(\"Namespace [ini]: \" + iniNamespace.Name);\r\nforeach (var property in iniNamespace.Properties)\r\n    Console.WriteLine(\"Property: [{0} = {1}]\", property.Name, property.Value);\r\n\r\nConsole.WriteLine();\r\n\r\nvar propertyWithManyValues = iniNamespace.Properties[1];\r\nforeach (var value in propertyWithManyValues.Values)\r\n    Console.WriteLine(\"Property: [{0} = {1}]\", propertyWithManyValues.Name, value);\r\n\r\nConsole.WriteLine();\r\n\r\nConsole.WriteLine(\"Simple.Config Sample - End\");\r\n```\r\n\r\n### Output\r\n\r\n```xml\r\nSimple.Config Sample - Start\r\n\r\nNamespace [xml]: Simple.Config.Sample\r\nProperty: [Prop1 = That's the value of Prop1]\r\nProperty: [Prop2 = That's the value of Prop2]\r\n\r\nNamespace [ini]: First Section\r\nProperty: [PropA = val1]\r\nProperty: [PropB = val2]\r\n\r\nProperty: [PropB = val2]\r\nProperty: [PropB = val3]\r\n\r\nSimple.Config Sample - End\r\n```\r\n\r\n# Support or Contact\r\nHaving trouble with Simple.Config? Raise the issue on https://github.com/spolnik/Simple.Config/issues and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}